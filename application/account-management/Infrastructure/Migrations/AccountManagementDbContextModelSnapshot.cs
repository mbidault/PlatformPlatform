// <auto-generated />
using System;
using System.CodeDom.Compiler;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlatformPlatform.AccountManagement.Infrastructure;

#nullable disable

namespace PlatformPlatform.AccountManagement.Infrastructure.Migrations
{
    [GeneratedCode("Entity Framework", null)]
    [DbContext(typeof(AccountManagementDbContext))]
    partial class AccountManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlatformPlatform.AccountManagement.Domain.AccountRegistrations.AccountRegistration", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("varchar(26)");

                b.Property<DateTimeOffset?>("CompletedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<DateTimeOffset>("CreatedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("varchar(100)");

                b.Property<DateTimeOffset?>("EmailConfirmedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("nvarchar(30)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("nvarchar(30)");

                b.Property<DateTimeOffset?>("ModifiedAt")
                    .IsConcurrencyToken()
                    .HasColumnType("datetimeoffset");

                b.Property<string>("OneTimePassword")
                    .IsRequired()
                    .HasColumnType("varchar(6)");

                b.Property<int>("RetryCount")
                    .HasColumnType("int");

                b.Property<string>("TenantId")
                    .HasColumnType("varchar(30)");

                b.Property<DateTimeOffset>("ValidUntil")
                    .HasColumnType("datetimeoffset");

                b.HasKey("Id");

                b.ToTable("AccountRegistrations");
            });

            modelBuilder.Entity("PlatformPlatform.AccountManagement.Domain.Tenants.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("PlatformPlatform.AccountManagement.Domain.Users.User", b =>
                {
                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<long>("Id")
                        .HasColumnType("char(26)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("EmailConfirmed")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlatformPlatform.AccountManagement.Domain.Users.User", b =>
                {
                    b.HasOne("PlatformPlatform.AccountManagement.Domain.Tenants.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
